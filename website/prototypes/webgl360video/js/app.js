// Generated by CoffeeScript 1.4.0
(function() {
  var App, VideoTexture,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  VideoTexture = (function() {

    VideoTexture.prototype.id = 0;

    VideoTexture.prototype.image = null;

    VideoTexture.prototype.mapping = null;

    VideoTexture.prototype.wrapS = 0;

    VideoTexture.prototype.wrapT = 0;

    VideoTexture.prototype.magFilter = 0;

    VideoTexture.prototype.minFilter = 0;

    VideoTexture.prototype.anisotropy = 0;

    VideoTexture.prototype.format = 0;

    VideoTexture.prototype.type = 0;

    VideoTexture.prototype.offset = null;

    VideoTexture.prototype.repeat = null;

    VideoTexture.prototype.generateMipmaps = false;

    VideoTexture.prototype.premultiplyAlpha = false;

    VideoTexture.prototype.flipY = true;

    VideoTexture.prototype.needsUpdate = true;

    VideoTexture.prototype.video = null;

    VideoTexture.prototype.canvaselement = null;

    VideoTexture.prototype.canvascontext = null;

    VideoTexture.prototype.videoURL = null;

    VideoTexture.prototype.videoWidth = 0;

    VideoTexture.prototype.videoHeight = 0;

    VideoTexture.prototype.width = 0;

    VideoTexture.prototype.height = 0;

    VideoTexture.prototype.fps = 24;

    VideoTexture.prototype.clock = null;

    function VideoTexture(videoURL, videoWidth, videoHeight, width, height, fps) {
      this.updateTexture = __bind(this.updateTexture, this);
      this.id = THREE.TextureCount++;
      this.clock = new THREE.Clock();
      this.mapping = new THREE.UVMapping();
      this.wrapS = THREE.ClampToEdgeWrapping;
      this.wrapT = THREE.ClampToEdgeWrapping;
      this.magFilter = THREE.LinearFilter;
      this.minFilter = THREE.LinearFilter;
      this.anisotropy = 1;
      this.format = THREE.RGBFormat;
      this.type = THREE.UnsignedByteType;
      this.offset = new THREE.Vector2(0, 0);
      this.repeat = new THREE.Vector2(1, 1);
      this.generateMipmaps = false;
      this.premultiplyAlpha = false;
      this.flipY = true;
      this.needsUpdate = true;
      this.videoURL = videoURL != null ? videoURL : "video.mp4";
      this.videoWidth = videoWidth != null ? videoWidth : 1024;
      this.videoHeight = videoHeight != null ? videoHeight : 1024;
      this.width = width != null ? width : 1024;
      this.height = height != null ? height : 1024;
      this.fps = fps != null ? fps : 24;
      this.video = document.createElement('video');
      this.video.src = this.videoURL;
      this.video.width = this.videoWidth;
      this.video.height = this.videoHeight;
      this.video.autoplay = true;
      this.video.loop = true;
      this.canvaselement = document.createElement('canvas');
      this.canvaselement.width = this.width;
      this.canvaselement.height = this.height;
      this.canvascontext = this.canvaselement.getContext("2d");
      this.canvascontext.webkitImageSmoothingEnabled = false;
      this.image = this.canvaselement;
      setInterval(this.updateTexture, 1000 / this.fps);
      return;
    }

    VideoTexture.prototype.updateTexture = function() {
      this.canvascontext.clearRect(0, 0, this.width, this.height);
      this.canvascontext.drawImage(this.video, 0, 0, this.videoWidth, this.videoHeight, 0, 0, this.width, this.height);
      this.needsUpdate = true;
    };

    VideoTexture.prototype.clone = function() {
      var texture;
      texture = new VideoTexure(this.videoURL, this.videoWidth, this.videoHeight, this.width, this.height);
      texture.image = this.image;
      texture.mapping = this.mapping;
      texture.wrapS = this.wrapS;
      texture.wrapT = this.wrapT;
      texture.magFilter = this.magFilter;
      texture.minFilter = this.minFilter;
      texture.anisotropy = this.anisotropy;
      texture.format = this.format;
      texture.type = this.type;
      texture.offset.copy(this.offset);
      texture.repeat.copy(this.repeat);
      texture.generateMipmaps = this.generateMipmaps;
      texture.premultiplyAlpha = this.premultiplyAlpha;
      texture.flipY = this.flipY;
      return texture;
    };

    return VideoTexture;

  })();

  App = (function() {

    App.prototype.stats = null;

    App.prototype.camera = null;

    App.prototype.scene = null;

    App.prototype.renderer = null;

    App.prototype.controls = null;

    App.prototype.clock = null;

    App.prototype.renderTarget = null;

    App.prototype.composer = null;

    App.prototype.APP_HEIGHT = 800;

    App.prototype.APP_WIDTH = 600;

    App.prototype.APP_HALF_X = 800 / 2;

    App.prototype.APP_HALF_Y = 600 / 2;

    App.prototype.mouseX = 0;

    App.prototype.mouseY = 0;

    App.prototype.counter = 0;

    App.prototype.videoWidth = 0;

    App.prototype.videoHeight = 0;

    App.prototype.videoName = null;

    App.prototype.videoFPS = 0;

    App.prototype.textureWidth = 0;

    App.prototype.textureHeight = 0;

    function App() {
      this.onWindowResize = __bind(this.onWindowResize, this);

      this.render = __bind(this.render, this);

      this.animate = __bind(this.animate, this);

      this.onTouchMove = __bind(this.onTouchMove, this);

      this.onTouchStart = __bind(this.onTouchStart, this);

      this.onMouseMove = __bind(this.onMouseMove, this);

      this.onMouseClick = __bind(this.onMouseClick, this);

      var ambient;
      this.videoWidth = 2160;
      this.videoHeight = 1080;
      this.videoName = "videos/inter_appart.webm";
      this.videoFPS = 24;
      this.textureWidth = 2048;
      this.textureHeight = 1024;
      this.clock = new THREE.Clock();
      this.pickMouse = {
        x: 0,
        y: 0
      };
      this.projector = new THREE.Projector();
      $("body").append('<div id="container"></div>');
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.renderer = new THREE.WebGLRenderer({
        antialias: false,
        stencil: false
      });
      this.renderer.autoClear = false;
      this.renderer.gammaOutput = true;
      this.renderer.gammaInput = true;
      this.renderer.sortObjects = false;
      this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
      this.camera = new THREE.PerspectiveCamera(50, this.APP_WIDTH / this.APP_HEIGHT, 1, 100000);
      this.camera.position.set(0, 0, 1);
      this.scene = new THREE.Scene();
      ambient = new THREE.AmbientLight(0xFFFFFF);
      this.scene.add(ambient);
      this.initSphere();
      this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);
      this.stats = new Stats();
      this.stats.domElement.style.position = 'absolute';
      this.stats.domElement.style.top = '0px';
      window.addEventListener('resize', this.onWindowResize, false);
      document.addEventListener('mousemove', this.onMouseMove, false);
      document.addEventListener('mousedown', this.onMouseClick, false);
      document.addEventListener('touchstart', this.onTouchStart, false);
      document.addEventListener('touchmove', this.onTouchMove, false);
      $("#container").append(this.stats.domElement);
      $("#container").append(this.renderer.domElement);
      this.initcomposer();
      this.animate();
      this.onWindowResize();
      return;
    }

    App.prototype.initcomposer = function() {
      var bluriness, effectBloom, effectFilm, hblur, renderModel, renderTargetParameters, renderToScreenPass, vblur;
      renderTargetParameters = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat
      };
      this.renderTarget = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT, renderTargetParameters);
      this.composer = new THREE.EffectComposer(this.renderer, this.renderTarget);
      renderModel = new THREE.RenderPass(this.scene, this.camera, null, false, false);
      effectBloom = new THREE.BloomPass(1);
      effectFilm = new THREE.FilmPass(0.10, 0.20, this.APP_HEIGHT * 2, false);
      this.fxaa = new THREE.ShaderPass(THREE.ShaderExtras["fxaa"]);
      this.fxaa.uniforms['resolution'].value = new THREE.Vector2(1 / this.APP_WIDTH, 1 / this.APP_HEIGHT);
      hblur = new THREE.ShaderPass(THREE.ShaderExtras["horizontalTiltShift"]);
      vblur = new THREE.ShaderPass(THREE.ShaderExtras["verticalTiltShift"]);
      bluriness = 2;
      hblur.uniforms['h'].value = bluriness / this.APP_WIDTH;
      vblur.uniforms['v'].value = bluriness / this.APP_HEIGHT;
      hblur.uniforms['r'].value = vblur.uniforms['r'].value = 0.5;
      this.composer.addPass(renderModel);
      this.composer.addPass(this.fxaa);
      renderToScreenPass = new THREE.ShaderPass(THREE.ShaderExtras["screen"]);
      renderToScreenPass.renderToScreen = true;
      return this.composer.addPass(renderToScreenPass);
    };

    App.prototype.initSphere = function() {
      var geom, mat, mesh;
      this.videoTexture = new VideoTexture(this.videoName, this.videoWidth, this.videoHeight, this.textureWidth, this.textureHeight, this.videoFPS);
      geom = new THREE.IcosahedronGeometry(10, 4);
      mat = new THREE.MeshBasicMaterial({
        map: this.videoTexture,
        side: THREE.BackSide
      });
      mat.map = this.videoTexture;
      mat.side = THREE.BackSide;
      mesh = new THREE.Mesh(geom, mat);
      mesh.rotation.y = -Math.PI / 2;
      return this.scene.add(mesh);
    };

    App.prototype.onMouseClick = function(event) {};

    App.prototype.onMouseMove = function(event) {
      this.mouseX = event.pageX - this.APP_HALF_X;
      this.mouseY = event.pageY - this.APP_HALF_Y;
      this.pickMouse.x = (event.clientX / this.APP_WIDTH) * 2 - 1;
      return this.pickMouse.y = -(event.clientY / this.APP_HEIGHT) * 2 + 1;
    };

    App.prototype.onTouchStart = function(event) {
      var mouseX, mouseY;
      if (event.touches.length === 1) {
        event.preventDefault();
        mouseX = event.touches[0].pageX - this.APP_HALF_X;
        return mouseY = event.touches[0].pageY - this.APP_HALF_Y;
      }
    };

    App.prototype.onTouchMove = function(event) {
      var mouseX, mouseY;
      if (event.touches.length === 1) {
        event.preventDefault();
        mouseX = event.touches[0].pageX - this.APP_HALF_X;
        return mouseY = event.touches[0].pageY - this.APP_HALF_Y;
      }
    };

    App.prototype.animate = function() {
      var delta;
      window.requestAnimationFrame(this.animate);
      delta = this.clock.getDelta();
      THREE.AnimationHandler.update(delta);
      this.controls.update();
      this.render();
      this.stats.update();
    };

    App.prototype.render = function() {
      this.renderer.clear();
      this.composer.render(0.1);
    };

    App.prototype.onWindowResize = function() {
      var _ref, _ref1;
      this.APP_WIDTH = $(window).width();
      this.APP_HEIGHT = $(window).height();
      this.APP_HALF_X = this.APP_WIDTH / 2;
      this.APP_HALF_Y = this.APP_HEIGHT / 2;
      this.camera.aspect = this.APP_WIDTH / this.APP_HEIGHT;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(this.APP_WIDTH, this.APP_HEIGHT);
      try {
        if ((_ref = this.controls) != null) {
          _ref.handleResize();
        }
      } catch (e) {
        null;
      }
      this.renderTarget = new THREE.WebGLRenderTarget(this.APP_WIDTH, this.APP_HEIGHT);
      this.composer.reset(this.renderTarget);
      if ((_ref1 = this.fxaa) != null) {
        _ref1.uniforms['resolution'].value = new THREE.Vector2(1 / this.APP_WIDTH, 1 / this.APP_HEIGHT);
      }
    };

    return App;

  })();

  $(function() {
    return $(document).ready(function() {
      if (!Detector.webgl || !Detector.workers) {
        return Detector.addGetWebGLMessage();
      } else {
        return new App;
      }
    });
  });

}).call(this);
