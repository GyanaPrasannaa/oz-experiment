// Generated by CoffeeScript 1.4.0
(function() {
  var FILE, GET, Logger, NUM_CHUNKS, asynCall, chunkSize, file, logger, readChunk_, sourceBuffer, video,
    _this = this;

  Logger = (function() {

    function Logger(id) {
      this.el = document.getElementById(id);
    }

    Logger.prototype.log = function(msg) {
      var fragment;
      fragment = document.createDocumentFragment();
      fragment.appendChild(document.createTextNode(msg));
      fragment.appendChild(document.createElement('br'));
      return this.el.appendChild(fragment);
    };

    Logger.prototype.clear = function() {
      return this.el.text('');
    };

    return Logger;

  })();

  FILE = "./video.webm";

  NUM_CHUNKS = 5;

  video = $("video")[0];

  chunkSize = null;

  file = null;

  sourceBuffer = null;

  asynCall = true;

  window.MediaSource = window.MediaSource || window.WebKitMediaSource;

  if (!!!window.MediaSource) {
    alert("MediaSource API is not available");
  }

  window.mediaSource = new MediaSource();

  $("[data-num-chunks]").text(NUM_CHUNKS);

  video.src = window.URL.createObjectURL(mediaSource);

  mediaSource.addEventListener("webkitsourceopen", function(e) {
    sourceBuffer = mediaSource.addSourceBuffer('video/webm; codecs="vorbis,vp8"');
    logger.log("mediaSource readyState : " + this.readyState);
    return GET(FILE, function(uInt8Array) {
      var i;
      file = new Blob([uInt8Array], {
        type: "video/webm"
      });
      chunkSize = Math.ceil(file.size / NUM_CHUNKS);
      logger.log("num chunks: " + NUM_CHUNKS);
      logger.log("chunkSize: " + chunkSize + ", totalSize: " + file.size);
      i = 0;
      readChunk_(i);
      return null;
    }, false);
  });

  mediaSource.addEventListener("webkitsourceended", function(e) {
    return logger.log("mediaSource readyState: " + this.readyState, false);
  });

  readChunk_ = function(i) {
    var chunk, reader, startByte;
    reader = new FileReader();
    reader.onload = function(e) {
      sourceBuffer.append(new Uint8Array(e.target.result));
      logger.log('appending chunk:' + i);
      if (i === NUM_CHUNKS - 1) {
        return mediaSource.endOfStream();
      } else {
        if (video.paused) {
          video.play();
        }
        return readChunk_(++i);
      }
    };
    startByte = chunkSize * i;
    chunk = file.slice(startByte, startByte + chunkSize);
    return reader.readAsArrayBuffer(chunk);
  };

  GET = function(url, callback) {
    var xhr;
    xhr = new XMLHttpRequest();
    xhr.open("GET", url, asynCall);
    xhr.responseType = "arraybuffer";
    xhr.send();
    return xhr.onload = function(e) {
      if (xhr.status !== 200) {
        console.log(url);
        alert("Unexpected status code " + xhr.status + " for " + url);
        return false;
      }
      return callback(new Uint8Array(xhr.response));
    };
  };

  logger = new Logger("log");

}).call(this);
