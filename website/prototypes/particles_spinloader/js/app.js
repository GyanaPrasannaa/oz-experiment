// Generated by CoffeeScript 1.4.0
(function() {
  var SpinParticle, SpinParticlesLoader,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SpinParticle = (function() {
    var dt;

    dt = .05;

    function SpinParticle(_ctx, _x, _y, _life, _angle) {
      this.angleToRadians = __bind(this.angleToRadians, this);

      this.fire = __bind(this.fire, this);

      this.update = __bind(this.update, this);
      this.moving = false;
      this.movingAngle = 0;
      this.movingRadius = Math.random() * 10;
      this.movingRate = Math.random() * 0.5 + 0.2;
      this.ctx = _ctx;
      this.position = {
        x: _x,
        y: _y
      };
      this.life = _life;
      this.angle = _angle;
      this.color = '#fff';
      this.velocity = {
        x: this.speed * Math.cos(this.angleToRadians(this.angle)),
        y: this.speed * Math.sin(this.angleToRadians(this.angle))
      };
    }

    SpinParticle.prototype.update = function() {
      this.ctx.beginPath();
      this.ctx.fillStyle = this.color;
      this.ctx.arc(this.position.x, this.position.y, 1, 0, Math.PI * 2, true);
      this.ctx.fill();
      return this.ctx.closePath();
    };

    SpinParticle.prototype.fire = function() {
      if (this.moving) {
        return;
      }
      this.moving = true;
      return this.movingAngle = 0;
    };

    SpinParticle.prototype.angleToRadians = function(angle) {
      return angle * Math.PI / 180;
    };

    return SpinParticle;

  })();

  SpinParticlesLoader = (function() {
    var maxParticles, particles;

    maxParticles = 100;

    particles = [];

    function SpinParticlesLoader() {
      this.map = __bind(this.map, this);

      this.update = __bind(this.update, this);

      this.init = __bind(this.init, this);
      this.width = 100;
      this.height = 100;
      this.radius = 20;
      this.spinAngle = 0;
      this.sonic = new Sonic({
        width: 100,
        height: 100,
        stepsPerFrame: 3,
        trailLength: 1,
        pointDistance: .01,
        fps: 30,
        step: 'fader',
        strokeColor: '#fff',
        setup: function() {
          return this._.lineWidth = 6;
        },
        path: [['arc', 50, 50, 20, 360, 0]]
      });
      this.canvas = $('#particles').get(0);
      this.ctx = this.canvas.getContext('2d');
      $('body').append(this.sonic.canvas);
      this.sonic.play();
      this.init();
    }

    SpinParticlesLoader.prototype.init = function() {
      var angle, cX, cY, i, p, x, y, _i, _results;
      cX = this.width / 2;
      cY = this.height / 2;
      _results = [];
      for (i = _i = 0; 0 <= maxParticles ? _i < maxParticles : _i > maxParticles; i = 0 <= maxParticles ? ++_i : --_i) {
        angle = Math.random() * (Math.PI * 2);
        x = Math.cos(angle) * this.radius + cX;
        y = Math.sin(angle) * this.radius + cY;
        p = new SpinParticle(this.ctx, x, y, 2, angle);
        _results.push(particles.push(p));
      }
      return _results;
    };

    SpinParticlesLoader.prototype.update = function() {
      var cX, cY, cos, i, p, _i, _ref, _results;
      cX = this.width / 2;
      cY = this.height / 2;
      this.spinAngle += 0.05;
      if (this.spinAngle > Math.PI * 2) {
        this.spinAngle = 0;
      }
      this.ctx.clearRect(0, 0, this.width, this.height);
      _results = [];
      for (i = _i = _ref = particles.length - 1; _i > 0; i = _i += -1) {
        p = particles[i];
        if (p.angle >= this.spinAngle - 0.1 && p.angle <= this.spinAngle + 0.1) {
          p.fire();
        }
        if (p.moving) {
          cos = this.map(Math.cos(p.movingAngle) * -1, -1, 1, 0, 1);
          p.position.x = Math.cos(p.angle) * (this.radius + cos * p.movingRadius) + cX;
          p.position.y = Math.sin(p.angle) * (this.radius + cos * p.movingRadius) + cY;
          p.movingAngle += p.movingRate;
          if (p.movingAngle > Math.PI * 2) {
            p.moving = false;
          }
        }
        _results.push(p.update());
      }
      return _results;
    };

    SpinParticlesLoader.prototype.map = function(num, min1, max1, min2, max2) {
      var num1, num2;
      num1 = (num - min1) / (max1 - min1);
      num2 = (num1 * (max2 - min2)) + min2;
      return num2;
    };

    return SpinParticlesLoader;

  })();

  $(function() {
    var loaderRender, preloader,
      _this = this;
    loaderRender = function() {
      requestAnimationFrame(loaderRender);
      return preloader.update();
    };
    preloader = new SpinParticlesLoader;
    return loaderRender();
  });

}).call(this);
