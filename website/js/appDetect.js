// Generated by CoffeeScript 1.4.0
(function() {
  var BrowserDetection, Locale, LocaleModel,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LocaleModel = (function(_super) {

    __extends(LocaleModel, _super);

    function LocaleModel() {
      return LocaleModel.__super__.constructor.apply(this, arguments);
    }

    LocaleModel.prototype.defaults = {
      lang: null,
      strings: null
    };

    return LocaleModel;

  })(Backbone.Model);

  Locale = (function() {

    Locale.prototype.lang = null;

    Locale.prototype.data = null;

    function Locale() {
      this.get = __bind(this.get, this);

      this.loadBackup = __bind(this.loadBackup, this);

      this.onSuccess = __bind(this.onSuccess, this);
      _.extend(this, Backbone.Events);
      this.lang = (navigator.language || navigator.userLanguage).toLowerCase();
      $.ajax({
        url: "/api/localisation/desktop/" + this.lang,
        dataType: "json",
        success: this.onSuccess,
        error: this.loadBackup
      });
      null;
    }

    Locale.prototype.onSuccess = function(event) {
      var d;
      d = null;
      if (event.responseText) {
        d = JSON.parse(event.responseText);
      } else {
        d = event;
      }
      this.data = new LocaleModel(d);
      this.trigger('complete');
      return null;
    };

    Locale.prototype.loadBackup = function() {
      var _this = this;
      $.ajax({
        url: '/locale/en/strings.txt',
        dataType: 'text',
        complete: this.onSuccess,
        error: function() {
          return console.log('error on loading backup');
        }
      });
      return null;
    };

    Locale.prototype.get = function(id) {
      return this.data.get('strings')[id] || "";
    };

    return Locale;

  })();

  BrowserDetection = (function() {
    var browser, browserVersion, webGL;

    browser = null;

    browserVersion = null;

    webGL = false;

    function BrowserDetection() {
      this.onError = __bind(this.onError, this);

      this.onSuccess = __bind(this.onSuccess, this);

      this.compare = __bind(this.compare, this);

      var dxt1Supported, dxt1Supported2, dxt3Supported, dxt5Supported, format, formats, webGLContextCreationSuccessful, _canvas, _gl, _glExtensionCompressedTextureS3TC, _i, _len;
      this.browser = BrowserDetect.browser;
      this.browserVersion = BrowserDetect.version;
      webGLContextCreationSuccessful = false;
      try {
        _canvas = document.createElement('canvas');
        if (!(_gl = _canvas.getContext('experimental-webgl', {
          alpha: 1,
          premultipliedAlpha: true,
          antialias: false,
          stencil: true,
          preserveDrawingBuffer: false
        }))) {
          webGLContextCreationSuccessful = false;
        } else {
          _glExtensionCompressedTextureS3TC = _gl.getExtension('WEBGL_compressed_texture_s3tc') || _gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || _gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
          formats = _gl.getParameter(_gl.COMPRESSED_TEXTURE_FORMATS);
          dxt5Supported = false;
          dxt3Supported = false;
          dxt1Supported = false;
          dxt1Supported2 = false;
          if (formats != null) {
            for (_i = 0, _len = formats.length; _i < _len; _i++) {
              format = formats[_i];
              if (format === _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT) {
                dxt5Supported = true;
              }
              if (format === _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT) {
                dxt1Supported = true;
              }
              if (format === _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT) {
                dxt1Supported2 = true;
              }
              if (format === _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT) {
                dxt3Supported = true;
              }
            }
          }
          webGLContextCreationSuccessful = _glExtensionCompressedTextureS3TC && dxt5Supported && dxt3Supported && dxt1Supported && dxt1Supported2;
        }
      } catch (error) {
        webGLContextCreationSuccessful = false;
      }
      webGL = Modernizr.webgl && webGLContextCreationSuccessful;
    }

    BrowserDetection.prototype.init = function() {
      return this.compare();
    };

    BrowserDetection.prototype.compare = function() {
      if (this.browser === 'Chrome' && webGL) {
        return this.onSuccess();
      } else if (this.browser === 'Chrome' && !webGL) {
        return this.onError({
          message: 'Chrome_NoWebGL_message',
          buttons: ['Chrome_NoWebGL_button1', 'Chrome_NoWebGL_button2']
        });
      } else if (this.browser === 'Firefox' && webGL) {
        return this.onError({
          message: 'FF4_Safari_WebGLmessage',
          buttons: ['FF4_Safari_WebGL_button1', 'FF4_Safari_WebGL_button2']
        });
      } else if (this.browser === 'Firefox' && !webGL) {
        return this.onError({
          message: 'FF4_noWebGL_message',
          buttons: ['FF4_noWebGL_button1', 'FF4_noWebGL_button2']
        });
      } else if (this.browser === 'Explorer' && (this.browserVersion === 6 || this.browserVersion === 7 || this.browserVersion === 8 || this.browserVersion === 9)) {
        return this.onError({
          message: 'Explorer_OldVersion_message',
          buttons: ['Explorer_OldVersion_button1']
        });
      } else if (this.browser === 'Safari' && webGL) {
        return this.onError({
          message: 'FF4_Safari_WebGLmessage',
          buttons: ['FF4_Safari_WebGL_button1', 'FF4_Safari_WebGL_button2']
        });
      } else if (this.browser === 'Safari' && !webGL) {
        return this.onError({
          message: 'Safari_message',
          buttons: ['Safari_button1']
        });
      } else {
        if (!window.WebGLRenderingContext) {
          this.onError({
            message: 'NoWebGLRenderingContext_message',
            buttons: ['NoWebGLRenderingContext_button1', 'NoWebGLRenderingContext_button2']
          });
        }
        if (!webGLContextCreationSuccessful) {
          return this.onError({
            message: 'NoWebGL_message',
            buttons: ['NoWebGL_button1', 'NoWebGL_button2']
          });
        }
      }
    };

    BrowserDetection.prototype.onSuccess = function() {
      return this.onError({
        message: 'Chrome_NoWebGL_message',
        buttons: ['Chrome_NoWebGL_button1', 'Chrome_NoWebGL_button2']
      });
    };

    BrowserDetection.prototype.onError = function(error) {};

    return BrowserDetection;

  })();

  $(function() {
    var img, img2,
      _this = this;
    window.error = {};
    window.detection = new BrowserDetection;
    window.errorMessage = {};
    window.detection.onSuccess = function() {
      $('#detect').remove();
      $('.qualityCheck').css({
        'display': 'table'
      });
      $('.qualityCheck').animate({
        opacity: 1
      }, 1000);
      if (navigator.appVersion.indexOf("Win") !== -1) {
        $('.qualityCheck').find('.settings_button').each(function(index, item) {
          return $(item).css({
            "padding": "7px 20px 8px 20px"
          });
        });
      }
      $('.low_quality').click(onLowClick);
      return $('.high_quality').click(onHighClick);
    };
    window.onQuality = function() {
      var script;
      script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = '/js/r.js';
      return $("head").append(script);
    };
    window.onLowClick = function() {
      $('.qualityCheck').find('.settings_button').each(function(index, item) {
        $(item).css({
          'cursor': 'default'
        });
        return $(item).click(null);
      });
      (window || document).textureQuality = "low";
      (window || document).displayQuality = "med";
      (window || document).dof = false;
      return $('.qualityCheck').animate({
        opacity: 0
      }, 1000, window.onCompleteAnim);
    };
    window.onHighClick = function() {
      $('.qualityCheck').find('.settings_button').each(function(index, item) {
        $(item).css({
          'cursor': 'default'
        });
        return $(item).click(null);
      });
      (window || document).textureQuality = "med";
      (window || document).displayQuality = "hi";
      (window || document).dof = true;
      return $('.qualityCheck').animate({
        opacity: 0
      }, 1000, window.onCompleteAnim);
    };
    window.onCompleteAnim = function() {
      $('.qualityCheck').remove();
      $('#polite').css({
        'display': 'table'
      });
      return onQuality();
    };
    window.detection.onError = function(error) {
      window.errorMessage = error;
      window.error.locale = new Locale;
      return window.error.locale.on('complete', window.fallbackTemplate);
    };
    window.fallbackTemplate = function(error) {
      var b, button, c, _i, _len, _ref, _results;
      $('#detect').css({
        display: 'table'
      });
      $('#detect .title').html(window.error.locale.get('homeTitle'));
      $('#detect .errorMessage span').html(window.error.locale.get(window.errorMessage.message));
      _ref = window.errorMessage.buttons;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        button = _ref[_i];
        if (window.showTechOrTrailer(button)) {
          c = window.error.locale.get(button + '_url');
          b = $('<a/>');
          b.css({
            'text-decoration': 'none'
          });
          if (c === "_!_tryanyway") {
            b.click(window.tryAnyway);
          } else {
            b.attr({
              href: c,
              target: '_blank'
            });
          }
          b.html("<button class='abstractbutton'>" + (window.error.locale.get(button)) + "</button>");
          $('#detect .btnContainer').append(b);
          $('#detect .btnContainer').append("<br>");
          if (navigator.appVersion.indexOf("Win") !== -1) {
            _results.push($(b).css({
              "padding": "7px 20px 8px 20px"
            }));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    window.showTechOrTrailer = function(label) {
      if (label.indexOf('Chrome_NoWebGL_button2') > -1) {
        return false;
      }
      if (label.indexOf('FF4_noWebGL_button2') > -1) {
        return false;
      }
      if (label.indexOf('NoWebGLRenderingContext_button2') > -1) {
        return false;
      }
      if (label.indexOf('NoWebGL_button2') > -1) {
        return false;
      }
      return true;
    };
    window.tryAnyway = function(event) {
      event.preventDefault();
      return window.detection.onSuccess();
    };
    img = new Image();
    img.src = '/img/home/interface_1x.png';
    if (window.devicePixelRatio === 2) {
      img2 = new Image();
      img2.src = '/img/home/interface_2x.png';
    }
    return window.detection.init();
  });

}).call(this);
