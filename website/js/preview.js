// Generated by CoffeeScript 1.4.0
(function() {
  var Abstract, AbstractButton, AppViewCutout, AppViewMusic, AppViewZoe, AssetModel, Button, CollectionAssets, ErrorMessage, Footer, FooterLogos, FooterShare, Header, Locale, MathUtils, MusicBox, MusicBoxGrid, MusicBoxSequencer, MusicBoxTable, Ratings, SSAsset, SimpleButton, SoundController, ThumbCutout, ThumbZoe, Tune,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  AssetModel = (function(_super) {

    __extends(AssetModel, _super);

    function AssetModel() {
      return AssetModel.__super__.constructor.apply(this, arguments);
    }

    AssetModel.prototype.defaults = {
      frames: null,
      animations: null,
      images: null
    };

    AssetModel.prototype.id = null;

    return AssetModel;

  })(Backbone.Model);

  CollectionAssets = (function(_super) {

    __extends(CollectionAssets, _super);

    function CollectionAssets() {
      this.getImage = __bind(this.getImage, this);
      this.get = __bind(this.get, this);      return CollectionAssets.__super__.constructor.apply(this, arguments);
    }

    CollectionAssets.prototype.model = AssetModel;

    CollectionAssets.prototype.fullSize = null;

    CollectionAssets.prototype.image = null;

    CollectionAssets.prototype.image2 = null;

    CollectionAssets.prototype.image1FullSize = null;

    CollectionAssets.prototype.image2FullSize = null;

    CollectionAssets.prototype.get = function(id) {
      var ss;
      ss = {};
      ss.frame = this.at(0).get('animations')[id][0];
      ss.coord = this.at(0).get('frames')[ss.frame];
      ss.x = ss.coord[0];
      ss.y = ss.coord[1];
      ss.width = ss.coord[2];
      ss.height = ss.coord[3];
      return ss;
    };

    CollectionAssets.prototype.getImage = function() {
      var imgURL, imgs;
      imgURL = "/img/preview/" + this.at(0).get('images');
      imgs = {};
      imgs.image = imgURL.replace('.png', '_1x.png');
      if (window.devicePixelRatio === 2) {
        imgs.image2 = imgURL.replace('.png', '_2x.png');
      }
      return imgs;
    };

    return CollectionAssets;

  })(Backbone.Collection);

  MusicBoxSequencer = (function() {

    function MusicBoxSequencer() {}

    MusicBoxSequencer.data = null;

    MusicBoxSequencer.playing = false;

    MusicBoxSequencer.animationTimer = null;

    MusicBoxSequencer.animationDuration = 1000 / 3;

    MusicBoxSequencer.initialize = function(data) {
      MusicBoxSequencer.data = data;
      if (!MusicBoxSequencer.playing) {
        MusicBoxSequencer.play();
      }
      return null;
    };

    MusicBoxSequencer.toggle = function() {
      if (MusicBoxSequencer.playing) {
        MusicBoxSequencer.stop();
      } else {
        MusicBoxSequencer.play();
      }
      return null;
    };

    MusicBoxSequencer.play = function(from) {
      MusicBoxSequencer.playing = true;
      MusicBoxSequencer.playAudioLoop(from);
      return null;
    };

    MusicBoxSequencer.stop = function() {
      MusicBoxSequencer.playing = false;
      MusicBoxSequencer.stopAudioLoop();
      return null;
    };

    MusicBoxSequencer.playAudioLoop = function(col) {
      var colStepDuration;
      colStepDuration = MusicBoxSequencer.animationDuration;
      if (col) {
        MusicBoxSequencer.colNo = col;
      } else {
        MusicBoxSequencer.colNo = MusicBoxSequencer.data.cols.length / 2;
      }
      MusicBoxSequencer.doLoopAudio();
      MusicBoxSequencer.loopAudio = setInterval(MusicBoxSequencer.doLoopAudio, colStepDuration);
      return null;
    };

    MusicBoxSequencer.doLoopAudio = function(max) {
      var currentCol, i, rowNo;
      if (max == null) {
        max = MusicBoxSequencer.data.cols.length - 1;
      }
      if (MusicBoxSequencer.colNo > max) {
        MusicBoxSequencer.colNo = 0;
      }
      currentCol = MusicBoxSequencer.data.cols[MusicBoxSequencer.colNo];
      i = 0;
      while (i < currentCol.rows.length) {
        rowNo = currentCol.rows[i];
        MusicBoxSequencer.playSound(MusicBoxSequencer.colNo, rowNo);
        i++;
      }
      i = 0;
      while (i < MusicBoxSequencer.data.loops.length) {
        MusicBoxSequencer.playLoopSound(MusicBoxSequencer.data.loops[i]);
        i++;
      }
      MusicBoxSequencer.colNo++;
      return null;
    };

    MusicBoxSequencer.playLoopSound = function(data) {
      var event;
      event = "";
      if (data.step) {
        if (MusicBoxSequencer.colNo % data.step === 0) {
          event = data.event;
        }
      } else if (data.col != null) {
        if (MusicBoxSequencer.colNo === data.col) {
          event = data.event;
        }
      }
      if (event !== "") {
        SoundController.send(data.event);
      }
      return null;
    };

    MusicBoxSequencer.stopAudioLoop = function() {
      clearInterval(MusicBoxSequencer.loopAudio);
      return null;
    };

    MusicBoxSequencer.playSound = function(colNo, rowNo) {
      SoundController.send(MusicBoxSequencer.getSoundEvent(colNo, rowNo));
      return null;
    };

    MusicBoxSequencer.getSoundEvent = function(colNo, rowNo) {
      return MusicBoxSequencer.data.notes[(MusicBoxSequencer.data.dimensions.lines - 1) - rowNo].event;
    };

    MusicBoxSequencer.transitionTo = function(playing, currentCol, data) {
      var col;
      SoundController.userLoopLonger = data;
      if (playing) {
        MusicBoxSequencer.data = data;
        col = currentCol < 12 ? (currentCol + 12) + (data.dimensions.cols / 2) : (currentCol - 12) + (data.dimensions.cols / 2);
        MusicBoxSequencer.play(col);
      } else {
        MusicBoxSequencer.initialize(data);
      }
      return null;
    };

    return MusicBoxSequencer;

  }).call(this);

  SoundController = (function() {

    function SoundController() {}

    SoundController.xmlLink = null;

    SoundController.mp3link = null;

    SoundController.swfLink = null;

    SoundController.loaded = false;

    SoundController.progress = 0;

    SoundController.holding = [];

    SoundController.userPaused = false;

    SoundController.userLoop = null;

    SoundController.userLoopLonger = null;

    SoundController.active = false;

    SoundController.onBatchComplete = null;

    SoundController.prototype.batchLoaded = false;

    SoundController.init = function(remote) {
      if (remote) {
        SoundController.xmlLink = "http://soundcontroller.se/unit9/oz/config.xml";
        SoundController.mp3link = "http://soundcontroller.se/unit9/oz/mp3s/";
        SoundController.swfLink = "http://soundcontroller.se/unit9/oz/";
        return require(["http://soundcontroller.se/unit9/oz/scsound.js"], SoundController.onLibLoaded);
      } else {
        SoundController.xmlLink = "/sounds/config.xml";
        SoundController.mp3link = "/sounds/";
        SoundController.swfLink = "/sounds/";
        return require(["/js/vendor/scsound.js"], SoundController.onLibLoaded);
      }
    };

    SoundController.onLibLoaded = function() {
      if (SoundController.active) {
        return SCSound.initialize(SoundController.xmlLink, SoundController.mp3link, SoundController.swfLink, SoundController.onloadcomplete, SoundController.onloadprogress, SoundController.onbatchloaded);
      } else {
        return SoundController.progress = 100;
      }
    };

    SoundController.onloadprogress = function(percent) {
      return SoundController.progress = Math.round(percent.toFixed(2) * 100);
    };

    SoundController.onloadcomplete = function() {
      SoundController.loaded = true;
      return SoundController.send('landing_start');
    };

    SoundController.onbatchloaded = function() {
      if (SoundController.onBatchComplete != null) {
        if (typeof SoundController.onBatchComplete !== "string") {
          SoundController.send(SoundController.onBatchComplete[0]);
          return SoundController.onBatchComplete = SoundController.onBatchComplete[1];
        } else {
          SoundController.send(SoundController.onBatchComplete);
          if (SoundController.onBatchComplete !== "musicbox_shared") {
            SoundController.playBackgroundMusic();
          } else {
            SoundController.batchLoaded = true;
          }
          return SoundController.onBatchComplete = null;
        }
      }
    };

    SoundController.send = function(id, onBatchComplete) {
      if (onBatchComplete != null) {
        SoundController.onBatchComplete = onBatchComplete;
      }
      if (SoundController.active) {
        if (SoundController.loaded) {
          return SCSound.send(id);
        } else {
          return SoundController.holding.push(id);
        }
      }
    };

    SoundController.paused = function(user) {
      if (SoundController.userPaused) {
        return;
      }
      SoundController.userPaused = user;
      return SoundController.send("sound_off");
    };

    SoundController.resume = function(user) {
      if (user == null) {
        user = false;
      }
      if (user) {
        SoundController.userPaused = false;
        SoundController.send("sound_on");
        return;
      }
      if (SoundController.userPaused) {
        return;
      }
      SoundController.userPaused = false;
      return SoundController.send("sound_on");
    };

    SoundController.oz = function() {
      return (window || document).oz;
    };

    SoundController.playBackgroundMusic = function() {
      if (SoundController.userLoop) {
        return MusicBoxSequencer.initialize(SoundController.userLoopLonger);
      } else {
        return MusicBoxSequencer.initialize(JSON.parse(SoundController.oz().baseAssets.get('loopbg').result));
      }
    };

    SoundController.preview = function(data) {
      return MusicBoxSequencer.initialize(data);
    };

    SoundController.stopBackgroundMusic = function() {
      return MusicBoxSequencer.stop();
    };

    SoundController.transition = function(playing, column) {
      var base, col, cols, currentCol, i, j, row, rows, user, _i, _j, _ref, _ref1;
      base = JSON.parse(SoundController.oz().baseAssets.get('loopbg').result);
      user = SoundController.userLoop;
      cols = [];
      for (i = _i = 0, _ref = base.dimensions.cols; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        cols[i] = {
          "rows": []
        };
      }
      for (i = _j = 0, _ref1 = user.cols.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        currentCol = user.cols[i];
        j = 0;
        col = i < 12 ? i + (user.dimensions.cols / 2) : i - (user.dimensions.cols / 2);
        rows = [];
        while (j < currentCol.rows.length) {
          row = currentCol.rows[j];
          j++;
          rows.push(row);
        }
        cols[col + (base.dimensions.cols / 2)] = {
          "rows": rows
        };
      }
      base.cols = cols;
      return MusicBoxSequencer.transitionTo(playing, column, base);
    };

    return SoundController;

  }).call(this);

  MathUtils = (function() {

    function MathUtils() {}

    MathUtils.lerp = function(ratio, start, end) {
      return start + (end - start) * ratio;
    };

    MathUtils.norm = function(val, min, max) {
      return (val - min) / (max - min);
    };

    MathUtils.map = function(val, min1, max1, min2, max2) {
      return MathUtils.lerp(MathUtils.norm(val, min1, max1), min2, max2);
    };

    return MathUtils;

  }).call(this);

  AppViewCutout = (function(_super) {

    __extends(AppViewCutout, _super);

    function AppViewCutout() {
      this.oz = __bind(this.oz, this);
      this.initialize = __bind(this.initialize, this);      return AppViewCutout.__super__.constructor.apply(this, arguments);
    }

    AppViewCutout.prototype.initialize = function() {
      this.setElement($('body'));
      console.log("LKASJDLKJSAD");
      this.header = new Header;
      this.$el.append(this.header.$el);
      if (window.location.href.indexOf(':8888') > -1) {
        this.thumb = new ThumbCutout('1.jpeg');
      } else {
        this.thumb = new ThumbCutout(this.getImageId());
      }
      this.container = this.$el.append('<div class="buttonContainer"><div class="buttonCell" /></div>');
      this.button = new Button(this.oz().locale.get('cutoutSharePageButton'), '/cutout');
      this.footer = new Footer;
      this.container.find('.buttonCell').prepend(this.button.$el);
      return this.$el.append(this.footer.$el);
    };

    AppViewCutout.prototype.getImageId = function() {
      return window.location.href.substr(window.location.href.lastIndexOf('/') + 1, window.location.href.length);
    };

    AppViewCutout.prototype.oz = function() {
      return (window || document).oz;
    };

    return AppViewCutout;

  })(Backbone.View);

  ThumbCutout = (function(_super) {

    __extends(ThumbCutout, _super);

    function ThumbCutout() {
      this.oz = __bind(this.oz, this);
      this.initAnimation = __bind(this.initAnimation, this);
      this.initialize = __bind(this.initialize, this);      return ThumbCutout.__super__.constructor.apply(this, arguments);
    }

    ThumbCutout.prototype.initialize = function(id) {
      var src,
        _this = this;
      this.setElement($('.wrapper'));
      this.fullImg = $('<div/>');
      this.fullImg.addClass('imgAnim');
      this.thumb = $('.wrapper img');
      this.fullImg.append(this.thumb);
      this.$el.append(this.fullImg);
      this.thumb.bind('load', function() {
        _this.polaroid = new Image;
        _this.polaroid.onload = function() {
          _this.thumb.addClass('imgLoaded');
          _this.fullImg.append(_this.polaroid);
          return _this.initAnimation();
        };
        return _this.polaroid.src = '/img/preview/cutout_polaroid.png';
      });
      src = "";
      if (window.location.href.indexOf(':8888') > -1) {
        src = "/img/preview/1.jpeg";
      } else {
        src = "/api/image/get/" + id;
      }
      this.thumb.attr({
        src: src
      });
      return this.fullImg.on('webkitAnimationEnd', function() {
        return $(document).trigger('thumbTransitionEnded');
      });
    };

    ThumbCutout.prototype.initAnimation = function() {
      return this.fullImg.addClass('img');
    };

    ThumbCutout.prototype.oz = function() {
      return (window || document).oz;
    };

    return ThumbCutout;

  })(Backbone.View);

  Abstract = (function(_super) {

    __extends(Abstract, _super);

    function Abstract() {
      this.oz = __bind(this.oz, this);
      this.onAssetsComplete = __bind(this.onAssetsComplete, this);
      this.onUnLock = __bind(this.onUnLock, this);
      this.onLock = __bind(this.onLock, this);
      this.onLockMouseMove = __bind(this.onLockMouseMove, this);
      this.pointerLockChange = __bind(this.pointerLockChange, this);
      this.releasePointLock = __bind(this.releasePointLock, this);
      this.pointLock = __bind(this.pointLock, this);
      this.onAssetsProgress = __bind(this.onAssetsProgress, this);
      this.onAssetsInitLoading = __bind(this.onAssetsInitLoading, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.mouseEnabled = __bind(this.mouseEnabled, this);
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.onResize = __bind(this.onResize, this);
      this.remove = __bind(this.remove, this);
      this.addChild = __bind(this.addChild, this);
      this.dispose = __bind(this.dispose, this);
      this.move = __bind(this.move, this);
      this.empty = __bind(this.empty, this);
      this.render = __bind(this.render, this);
      this.pause = __bind(this.pause, this);
      this.resume = __bind(this.resume, this);
      this.update = __bind(this.update, this);
      this.init = __bind(this.init, this);      return Abstract.__super__.constructor.apply(this, arguments);
    }

    Abstract.prototype.el = null;

    Abstract.prototype.id = null;

    Abstract.prototype.children = null;

    Abstract.prototype.template = null;

    Abstract.prototype.templateVars = null;

    Abstract.prototype.assetsBatch = null;

    Abstract.prototype.paused = true;

    Abstract.prototype.displayMode = '';

    Abstract.prototype.visible = true;

    Abstract.prototype.initialize = function() {
      this.children = [];
      if (this.template) {
        this.setElement(this.template);
      }
      if (this.id) {
        this.$el.attr('id', this.id);
      }
      if (this.className) {
        this.$el.addClass(this.className);
      }
      this.init();
      if (this.assetsBatch != null) {
        this.onAssetsInitLoading();
        this.oz().baseAssets.on("COMPLETE", this.onAssetsComplete);
        this.oz().baseAssets.on("PROGRESS", this.onAssetsProgress);
        this.oz().baseAssets.loadBatch(this.assetsBatch);
      }
      return this.paused = false;
    };

    Abstract.prototype.init = function() {
      return this;
    };

    Abstract.prototype.update = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.update();
      }
      return this;
    };

    Abstract.prototype.resume = function() {
      var child, _i, _len, _ref;
      this.paused = false;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.resume != null) {
          child.resume();
        }
        child.$el.resume();
      }
      return this;
    };

    Abstract.prototype.pause = function() {
      var child, _i, _len, _ref;
      this.paused = true;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.pause != null) {
          child.pause();
        }
        child.$el.pause();
      }
      return this;
    };

    Abstract.prototype.render = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        child.render();
      }
      return this;
    };

    Abstract.prototype.empty = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child) {
          if (child.dispose != null) {
            child.dispose();
          }
          if (child.empty != null) {
            child.empty();
          }
          this.remove(child);
        }
      }
      this.children = [];
      this.$el.empty();
      return this;
    };

    Abstract.prototype.move = function(x, y) {
      this.$el.css({
        left: x,
        top: y
      });
      return this;
    };

    Abstract.prototype.dispose = function() {
      var n;
      n = $(this.$el.children()[0]).attr('id') || $(this.$el.children()[0]).attr('class') || this.$el.html() || this.$el.attr('class') || this.$el.attr('style');
      console.error("don't forget to override dispose -> " + n);
      return this;
    };

    Abstract.prototype.addChild = function(child, prepend) {
      var c;
      if (prepend == null) {
        prepend = false;
      }
      if (child.el) {
        this.children.push(child);
      }
      c = child.el ? child.$el : child;
      if (!prepend) {
        this.$el.append(c);
      } else {
        this.$el.prepend(c);
      }
      return this;
    };

    Abstract.prototype.remove = function(child) {
      var c;
      if (child == null) {
        return;
      }
      c = child.el ? child.$el : $(child);
      if (c) {
        child.dispose();
      }
      if (c && this.children.indexOf(child) !== -1) {
        this.children.splice(this.children.indexOf(child), 1);
      }
      return c.remove();
    };

    Abstract.prototype.onResize = function(event) {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (child.onResize) {
          child.onResize();
        }
      }
      return this;
    };

    Abstract.prototype.hide = function(anim, callback, time, ease, hide) {
      var _this = this;
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      if (hide == null) {
        hide = false;
      }
      /*@displayMode = @$el.css("display")
      */

      this.visible = false;
      if (!anim) {
        this.$el.css({
          opacity: 0
        });
        if (hide) {
          return this.$el.css({
            "visibility": "hidden"
          });
        }
      } else {
        return this.$el.stop().animate({
          opacity: 0
        }, time, ease, function() {
          if (callback) {
            callback();
          }
          if (hide) {
            return _this.$el.css({
              "visibility": "hidden"
            });
          }
        });
      }
    };

    Abstract.prototype.show = function(anim, callback, time, ease) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      if (time == null) {
        time = 400;
      }
      if (ease == null) {
        ease = "linear";
      }
      this.visible = true;
      /*if @displayMode != 'none' && @displayMode != ""
          @$el.css {display : @displayMode}
      */

      this.$el.css({
        "visibility": "visible"
      });
      if (!anim) {
        return this.$el.css({
          opacity: 1
        });
      } else {
        return this.$el.stop().animate({
          opacity: 1
        }, time, ease, callback);
      }
    };

    Abstract.prototype.mouseEnabled = function(enabled) {
      return this.$el.css({
        "pointer-events": enabled ? "auto" : "none"
      });
    };

    Abstract.prototype.onEnterFrame = function() {
      var child, _i, _len, _ref;
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (!this.paused && child && child.onEnterFrame && (child.paused === false)) {
          child.onEnterFrame();
        }
      }
      return this;
    };

    Abstract.prototype.onAssetsInitLoading = function() {
      return this;
    };

    Abstract.prototype.onAssetsProgress = function() {
      return this;
    };

    Abstract.prototype.pointLock = function() {
      var b;
      $(document).bind('pointerlockchange', this.pointerLockChange);
      $(document).bind('mozpointerlockchange', this.pointerLockChange);
      $(document).bind('webkitpointerlockchange', this.pointerLockChange);
      b = $('body')[0];
      b.requestPointerLock = b.requestPointerLock || b.mozRequestPointerLock || b.webkitRequestPointerLock;
      return b.requestPointerLock();
    };

    Abstract.prototype.releasePointLock = function() {
      var b;
      $(document).unbind('pointerlockchange', this.pointerLockChange);
      $(document).unbind('mozpointerlockchange', this.pointerLockChange);
      $(document).unbind('webkitpointerlockchange', this.pointerLockChange);
      $(document).unbind('mousemove', this.onLockMouseMove);
      b = document;
      b.exitPointerLock = b.exitPointerLock || b.mozExitPointerLock || b.webkitExitPointerLock;
      return b.exitPointerLock();
    };

    Abstract.prototype.pointerLockChange = function(event) {
      if (document.mozPointerLockElement === $('body')[0] || document.webkitPointerLockElement === $('body')[0]) {
        $(document).bind('mousemove', this.onLockMouseMove);
        return this.onLock();
      } else {
        this.releasePointLock();
        $(document).unbind('mousemove', this.onLockMouseMove);
        return this.onUnLock();
      }
    };

    Abstract.prototype.onLockMouseMove = function(event) {
      return this;
    };

    Abstract.prototype.onLock = function() {
      return this;
    };

    Abstract.prototype.onUnLock = function() {
      return this;
    };

    Abstract.prototype.onAssetsComplete = function() {
      this.oz().baseAssets.off("COMPLETE", this.onAssetsComplete);
      return this.oz().baseAssets.off("PROGRESS", this.onAssetsProgress);
    };

    Abstract.prototype.oz = function() {
      return (window || document).oz;
    };

    return Abstract;

  })(Backbone.View);

  AbstractButton = (function(_super) {

    __extends(AbstractButton, _super);

    function AbstractButton() {
      this.oz = __bind(this.oz, this);
      this.show = __bind(this.show, this);
      this.hide = __bind(this.hide, this);
      this.pause = __bind(this.pause, this);
      this.resume = __bind(this.resume, this);
      this.dispose = __bind(this.dispose, this);
      this.changeLabel = __bind(this.changeLabel, this);
      this.onclick = __bind(this.onclick, this);
      this.onout = __bind(this.onout, this);
      this.onover = __bind(this.onover, this);
      this.disable = __bind(this.disable, this);
      this.enable = __bind(this.enable, this);
      this.init = __bind(this.init, this);      return AbstractButton.__super__.constructor.apply(this, arguments);
    }

    AbstractButton.prototype.el = null;

    AbstractButton.prototype.id = null;

    AbstractButton.prototype.label = null;

    AbstractButton.prototype.template = null;

    AbstractButton.prototype.templateVars = null;

    AbstractButton.prototype.tagName = "button";

    AbstractButton.prototype.className = "abstractbutton";

    AbstractButton.prototype.classButton = null;

    AbstractButton.prototype.classAnimated = null;

    AbstractButton.prototype.initialize = function() {
      var tmpHTML;
      if (this.template) {
        tmpHTML = _.template(this.oz().templates.get(this.template));
        this.setElement(tmpHTML(this.templateVars));
      }
      if (this.id) {
        this.$el.attr('id', this.id);
      }
      if (this.className) {
        this.$el.addClass(this.className);
      }
      if (this.classAnimated) {
        this.$el.addClass(this.classAnimated);
      }
      if (this.label != null) {
        this.$el.append(this.label);
      }
      return this.init();
    };

    AbstractButton.prototype.init = function() {
      return this;
    };

    AbstractButton.prototype.enable = function() {
      this.$el.css({
        "cursor": "pointer"
      });
      this.$el.removeClass("disabled");
      this.$el.mouseover(this.onover);
      this.$el.mouseout(this.onout);
      return this.$el.bind("click", this.onclick);
    };

    AbstractButton.prototype.disable = function() {
      this.$el.css({
        "cursor": "default"
      });
      this.$el.addClass("disabled");
      this.$el.unbind("mouseover");
      this.$el.unbind("mouseout");
      return this.$el.unbind("click");
    };

    AbstractButton.prototype.onover = function() {
      return this.$el.addClass("over");
    };

    AbstractButton.prototype.onout = function() {
      return this.$el.removeClass("over");
    };

    AbstractButton.prototype.onclick = function() {
      return this;
    };

    AbstractButton.prototype.changeLabel = function(label) {
      return this.$el.html(label);
    };

    AbstractButton.prototype.dispose = function() {
      var n;
      n = $(this.$el.children()[0]).attr('id') || $(this.$el.children()[0]).attr('class') || this.$el.html();
      return this;
    };

    AbstractButton.prototype.resume = function() {
      return this;
    };

    AbstractButton.prototype.pause = function() {
      return this;
    };

    AbstractButton.prototype.hide = function(anim, callback) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      this.visible = false;
      if (!anim) {
        return this.$el.css({
          opacity: 0
        });
      } else {
        return this.$el.animate({
          opacity: 0
        }, 400, 'linear', callback);
      }
    };

    AbstractButton.prototype.show = function(anim, callback) {
      if (anim == null) {
        anim = false;
      }
      if (callback == null) {
        callback = null;
      }
      this.visible = true;
      if (!anim) {
        return this.$el.css({
          opacity: 1
        });
      } else {
        return this.$el.animate({
          opacity: 1
        }, 400, 'linear', callback);
      }
    };

    AbstractButton.prototype.oz = function() {
      return (window || document).oz;
    };

    return AbstractButton;

  })(Backbone.View);

  SimpleButton = (function(_super) {

    __extends(SimpleButton, _super);

    function SimpleButton() {
      this.dispose = __bind(this.dispose, this);
      this.onclick = __bind(this.onclick, this);
      this.onout = __bind(this.onout, this);
      this.onover = __bind(this.onover, this);
      this.init = __bind(this.init, this);      return SimpleButton.__super__.constructor.apply(this, arguments);
    }

    SimpleButton.prototype.initialize = function(_id, _label, transitionClass) {
      if (transitionClass == null) {
        transitionClass = "btanimated";
      }
      this.id = _id;
      this.label = _label;
      this.classAnimated = transitionClass;
      return SimpleButton.__super__.initialize.call(this);
    };

    SimpleButton.prototype.init = function() {
      return this.enable();
    };

    SimpleButton.prototype.onover = function() {
      SoundController.send("btn_generic_over");
      return SimpleButton.__super__.onover.call(this);
    };

    SimpleButton.prototype.onout = function() {
      return SimpleButton.__super__.onout.call(this);
    };

    SimpleButton.prototype.onclick = function() {
      SoundController.send("btn_generic_click");
      return this.trigger("click", this);
    };

    SimpleButton.prototype.dispose = function() {
      return this;
    };

    return SimpleButton;

  })(AbstractButton);

  SSAsset = (function(_super) {

    __extends(SSAsset, _super);

    function SSAsset() {
      this.oz = __bind(this.oz, this);
      this.dispose = __bind(this.dispose, this);
      this.center = __bind(this.center, this);
      this.removeClass = __bind(this.removeClass, this);
      this.addClass = __bind(this.addClass, this);
      this.css = __bind(this.css, this);
      this.out = __bind(this.out, this);
      this.over = __bind(this.over, this);
      this.init = __bind(this.init, this);      return SSAsset.__super__.constructor.apply(this, arguments);
    }

    SSAsset.prototype.ss = null;

    SSAsset.prototype.from = null;

    SSAsset.prototype.asset = null;

    SSAsset.prototype.initialize = function(asset) {
      this.asset = asset;
      return SSAsset.__super__.initialize.call(this);
    };

    SSAsset.prototype.init = function() {
      var css, fullSize, h, w, x, y;
      this.ss = this.oz().ss.get(this.asset);
      x = Math.round(this.ss.x / 2) - 1;
      y = Math.round(this.ss.y / 2);
      w = Math.round(this.ss.width / 2);
      h = Math.round(this.ss.height / 2);
      fullSize = window.devicePixelRatio === 2 ? this.oz().ss.image1FullSize : this.oz().ss.image1FullSize;
      css = {
        width: w,
        height: h,
        'background-image': "url(" + (this.oz().ssImage.src) + ")",
        'background-size': "" + fullSize[0] + "px " + fullSize[1] + "px",
        'background-position': "-" + x + "px -" + y + "px"
      };
      if (window.devicePixelRatio === 2) {
        css['background-image'] = "-webkit-image-set(url(" + (this.oz().ssImage.src) + ") 1x, url(" + (this.oz().ssImage2x.src) + ") 2x)";
      }
      this.$el.css(css);
      return this.render();
    };

    SSAsset.prototype.over = function(over) {
      return this.changeState(over);
    };

    SSAsset.prototype.out = function() {
      var x, y;
      x = Math.round(this.ss.x / 2) - 1;
      y = Math.round(this.ss.y / 2);
      return this.$el.css({
        'background-position': -x + "px " + -y + "px"
      });
    };

    SSAsset.prototype.css = function(params) {
      return this.$el.css(params);
    };

    SSAsset.prototype.addClass = function(clazz) {
      return this.$el.addClass(clazz);
    };

    SSAsset.prototype.removeClass = function(clazz) {
      return this.$el.removeClass(clazz);
    };

    SSAsset.prototype.center = function() {
      var x;
      x = Math.round(this.ss.width / 4);
      return this.$el.css({
        'position': 'absolute',
        'left': '50%',
        'margin-left': "" + (-x) + "px"
      });
    };

    SSAsset.prototype.dispose = function() {
      return this;
    };

    SSAsset.prototype.oz = function() {
      return (window || document).oz;
    };

    return SSAsset;

  })(Abstract);

  Button = (function(_super) {

    __extends(Button, _super);

    function Button() {
      this.initialize = __bind(this.initialize, this);      return Button.__super__.constructor.apply(this, arguments);
    }

    Button.prototype.className = 'extra-page-button';

    Button.prototype.tagName = 'a';

    Button.prototype.initialize = function(copy, link) {
      this.$el.text(copy);
      return this.$el.attr({
        'href': link,
        'target': '_blank'
      });
    };

    return Button;

  })(Backbone.View);

  /*
  class Button extends Backbone.View
  
      className: 'extra-page-button'
      tagName: 'a'
  
      initialize: =>
          @$el.text 'Create your own'
          @$el.attr {
              'href': '/m/cutout',
              'target': '_blank'
          }
  
      setPosition: ->
          marginLeft = -Math.floor @$el.innerWidth() / 2
          @$el.css "margin-left", "#{marginLeft}px"
  */


  ErrorMessage = (function(_super) {

    __extends(ErrorMessage, _super);

    function ErrorMessage() {
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.initialize = __bind(this.initialize, this);      return ErrorMessage.__super__.constructor.apply(this, arguments);
    }

    ErrorMessage.prototype.tagName = 'div';

    ErrorMessage.prototype.initialize = function() {
      var bottom, cont, container, copy, warning;
      this.setElement($('body'));
      this.header = new Header;
      this.$el.append(this.header.$el);
      container = $('<div class="errorContainer"/>');
      cont = $('<div/>');
      container.append(cont);
      warning = new SSAsset('instructions_warning');
      warning.$el.addClass('ssAsset');
      cont.append(warning.$el);
      copy = $('<p/>');
      copy.html(this.oz().locale.get('share_page_expired_copy'));
      cont.append(copy);
      bottom = new SSAsset('breaker_down');
      bottom.$el.addClass('ssAsset');
      cont.append(bottom.$el);
      this.$el.append(container);
      this.footer = new Footer;
      return this.$el.append(this.footer.$el);
    };

    ErrorMessage.prototype.onEnterFrame = function() {
      return this;
    };

    return ErrorMessage;

  })(Abstract);

  Footer = (function(_super) {

    __extends(Footer, _super);

    function Footer() {
      this.onWindowResize = __bind(this.onWindowResize, this);
      this.renderShare = __bind(this.renderShare, this);
      this.initialize = __bind(this.initialize, this);      return Footer.__super__.constructor.apply(this, arguments);
    }

    Footer.prototype.tagName = 'footer';

    Footer.prototype.initialize = function() {
      this.footerLogos = new FooterLogos;
      this.footerShare = new FooterShare;
      this.ratings = new Ratings;
      this.$el.append(this.footerLogos.$el);
      this.$el.append(this.footerShare.$el);
      this.$el.append(this.ratings.$el);
      setTimeout(this.renderShare, 1000);
      return $(window).bind('resize', this.onWindowResize);
    };

    Footer.prototype.renderShare = function() {
      twttr.widgets.load();
      return gapi.plusone.render('g-plusone', {
        size: "medium",
        expandTo: 'top'
      });
    };

    Footer.prototype.onWindowResize = function(e) {
      return this.$el.css('width', $('body').width());
    };

    return Footer;

  })(Backbone.View);

  FooterLogos = (function(_super) {

    __extends(FooterLogos, _super);

    function FooterLogos() {
      this.initialize = __bind(this.initialize, this);      return FooterLogos.__super__.constructor.apply(this, arguments);
    }

    FooterLogos.prototype.className = 'footer-logos';

    FooterLogos.prototype.initialize = function() {
      this.logo_oz_asset = new SSAsset('logo_oz');
      this.logo_oz = $('<a/>');
      this.logo_oz.append(this.logo_oz_asset.$el);
      this.logo_oz.attr({
        'class': 'logo_oz',
        'href': '/',
        'target': '_blank'
      });
      this.logo_chrome_asset = new SSAsset('logo_chrome');
      this.logo_chrome = $('<a/>');
      this.logo_chrome.append(this.logo_chrome_asset.$el);
      this.logo_chrome.attr({
        'class': 'logo_chrome',
        'href': ' http://www.chromeexperiments.com',
        'target': '_blank'
      });
      this.logo_google_asset = new SSAsset('logo_google');
      this.logo_google = $('<a/>');
      this.logo_google.append(this.logo_google_asset.$el);
      this.logo_google.attr({
        'class': 'logo_google',
        'href': 'http://google.com',
        'target': '_blank'
      });
      this.$el.append(this.logo_oz);
      this.$el.append(this.logo_chrome);
      return this.$el.append(this.logo_google);
    };

    return FooterLogos;

  })(Backbone.View);

  FooterShare = (function(_super) {

    __extends(FooterShare, _super);

    function FooterShare() {
      this.oz = __bind(this.oz, this);
      this.addWeibo = __bind(this.addWeibo, this);
      this.addRenRen = __bind(this.addRenRen, this);
      this.initialize = __bind(this.initialize, this);      return FooterShare.__super__.constructor.apply(this, arguments);
    }

    FooterShare.prototype.className = 'footer-share';

    FooterShare.prototype.initialize = function() {
      this.lang = (navigator.language || navigator.userLanguage).toLowerCase();
      if (this.lang.indexOf("zn") === -1) {
        this.$googleBtn = $('<div/>');
        this.$googleBtn.attr({
          "id": 'g-plusone',
          'class': 'g-plusone',
          'align': 'right',
          'data-size': 'medium'
        });
        this.$facebookBtn = $('<iframe/>');
        this.$facebookBtn.attr({
          'class': 'fb-like',
          'src': "//www.facebook.com/plugins/like.php?send=false&layout=button_count&href=" + document.location.origin,
          'scrolling': "no",
          "frameborder": "0"
        });
        this.$twitterBtn = $('<a/>');
        this.$twitterBtn.attr({
          'class': 'twitter-share-button',
          'href': 'https://twitter.com/share',
          'data-via': 'unit9',
          'data-lang': this.lang,
          'data-size': 'small',
          'data-hashtags': this.oz().locale.get('seo_twtter_hashtag'),
          'data-text': this.oz().locale.get('seo_twtter_default_text'),
          'data-via': this.oz().locale.get('seo_twitter_handle')
        });
        this.$el.append(this.$googleBtn);
        this.$el.append(this.$twitterBtn);
        return this.$el.append(this.$facebookBtn);
      } else {
        this.addWeibo();
        return this.addRenRen();
      }
    };

    FooterShare.prototype.addRenRen = function() {
      var h, k, lk, p, v, w;
      p = [];
      w = 130;
      h = 20;
      lk = {
        url: '' || window.location.href,
        title: '' || document.title,
        description: '',
        image: ''
      };
      for (k in lk) {
        v = lk[k];
        p.push(k + "=" + encodeURIComponent(v || ''));
      }
      this.renren = $("<iframe scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\" src=\"http://www.connect.renren.com/like/v2?" + (p.join("&")) + "\" style='width:" + w + "px; height:" + h + "px;'/>");
      return this.$el.append(this.renren);
    };

    FooterShare.prototype.addWeibo = function() {
      var k, params, temp, v, _h, _w;
      _w = 72;
      _h = 24;
      params = {
        url: window.location.href,
        type: '2',
        count: '1',
        appkey: '',
        title: '',
        pic: '',
        ralateUid: '',
        language: 'zh_cn',
        rnd: new Date().valueOf()
      };
      temp = [];
      for (k in params) {
        v = params[k];
        temp.push(k + '=' + encodeURIComponent(v || ''));
      }
      this.weibo = $('<iframe class="weibo_share" allowTransparency="true" frameborder="0" scrolling="no" src="http://hits.sinajs.cn/A1/weiboshare.html?' + temp.join('&') + '" width="' + _w + '" height="' + _h + '"/>');
      this.weibo.css({
        "-webkit-transform": "scale(.85)",
        "margin-top": "-2px"
      });
      return this.$el.append(this.weibo);
    };

    FooterShare.prototype.oz = function() {
      return (window || document).oz;
    };

    return FooterShare;

  })(Backbone.View);

  Header = (function(_super) {

    __extends(Header, _super);

    function Header() {
      this.oz = __bind(this.oz, this);      return Header.__super__.constructor.apply(this, arguments);
    }

    Header.prototype.className = 'header';

    Header.prototype.tagName = 'span';

    Header.prototype.initialize = function() {
      this.img_flourish = new SSAsset('breaker_up');
      this.$cellContainer = $('<div/>');
      this.$cellContainer.attr('class', 'innerFooterCenter');
      this.$sentence = $('<span/>');
      this.$sentence.text(this.oz().locale.get('homeTitle'));
      this.img_flourish2 = new SSAsset('breaker_down');
      this.$cellContainer.append(this.img_flourish.$el);
      this.$cellContainer.append(this.$sentence);
      this.$cellContainer.append(this.img_flourish2.$el);
      return this.$el.append(this.$cellContainer);
    };

    Header.prototype.oz = function() {
      return (window || document).oz;
    };

    return Header;

  })(Backbone.View);

  Ratings = (function(_super) {

    __extends(Ratings, _super);

    function Ratings() {
      this.oz = __bind(this.oz, this);
      this.initialize = __bind(this.initialize, this);      return Ratings.__super__.constructor.apply(this, arguments);
    }

    Ratings.prototype.tagName = 'div';

    Ratings.prototype.className = 'ratings';

    Ratings.prototype.initialize = function() {
      this.pg = new SSAsset('rating_block');
      this.$copyright = $('<a/>');
      this.$copyright.text(this.oz().locale.get('menuRatings'));
      this.$copyright.attr({
        'href': this.oz().locale.get('menuRatingsLink')
      });
      this.$el.append(this.pg.$el);
      return this.$el.append(this.$copyright);
    };

    Ratings.prototype.oz = function() {
      return (window || document).oz;
    };

    return Ratings;

  })(Backbone.View);

  Locale = (function() {

    Locale.prototype.lang = null;

    Locale.prototype.data = null;

    function Locale() {
      this.get = __bind(this.get, this);
      this.loadBackup = __bind(this.loadBackup, this);
      this.onSuccess = __bind(this.onSuccess, this);
      this.init = __bind(this.init, this);      _.extend(this, Backbone.Events);
    }

    Locale.prototype.init = function() {
      this.lang = (navigator.language || navigator.userLanguage).toLowerCase();
      return $.ajax({
        url: "/api/localisation/desktop/" + this.lang,
        dataType: "json",
        success: this.onSuccess,
        error: this.loadBackup
      });
    };

    Locale.prototype.onSuccess = function(event) {
      var d;
      d = null;
      if (event.responseText) {
        d = JSON.parse(event.responseText);
      } else {
        d = event;
      }
      this.data = d;
      return this.trigger('complete');
    };

    Locale.prototype.loadBackup = function() {
      var _this = this;
      return $.ajax({
        url: '/locale/en/strings.txt',
        dataType: 'text',
        complete: this.onSuccess,
        error: function() {
          return console.log('error on loading backup');
        }
      });
    };

    Locale.prototype.get = function(id) {
      return this.data.strings[id] || "";
    };

    return Locale;

  })();

  AppViewMusic = (function(_super) {

    __extends(AppViewMusic, _super);

    function AppViewMusic() {
      this.oz = __bind(this.oz, this);
      this.onEnterFrame = __bind(this.onEnterFrame, this);
      this.activate = __bind(this.activate, this);
      this.onAllSoundsLoaded = __bind(this.onAllSoundsLoaded, this);
      this.soudControllerLoaded = __bind(this.soudControllerLoaded, this);
      this.tooglePlay = __bind(this.tooglePlay, this);
      this.addInterface = __bind(this.addInterface, this);
      this.addSpinner = __bind(this.addSpinner, this);
      this.init = __bind(this.init, this);      return AppViewMusic.__super__.constructor.apply(this, arguments);
    }

    AppViewMusic.prototype.soundsLoaded = false;

    AppViewMusic.prototype.container = null;

    AppViewMusic.prototype.buttons = null;

    AppViewMusic.prototype.playing = false;

    AppViewMusic.prototype.init = function() {
      this.setElement($('body'));
      this.header = new Header;
      this.$el.append(this.header.$el);
      SoundController.active = true;
      SoundController.init(false);
      this.addInterface();
      this.buttonContainer = this.$el.append('<div class="buttonContainer"><div class="buttonCell" /></div>');
      this.button = new Button(this.oz().locale.get('musicSharePageButton'), '/music');
      this.buttonContainer.find('.buttonCell').append(this.button.$el);
      this.footer = new Footer;
      return this.$el.append(this.footer.$el);
    };

    AppViewMusic.prototype.addSpinner = function() {
      var loader, loaderCanvas;
      this.spinner = new Sonic({
        width: 50,
        height: 50,
        stepsPerFrame: 1,
        trailLength: 1,
        pointDistance: .02,
        fps: 30,
        fillColor: '#FFFFFF',
        step: function(point, index) {
          this._.beginPath();
          this._.moveTo(point.x, point.y);
          this._.arc(point.x, point.y, index * 3, 0, Math.PI * 2, false);
          this._.closePath();
          return this._.fill();
        },
        path: [['arc', 25, 25, 10, 0, 360]]
      });
      loader = $("<div />");
      loader.css({
        "position": "absolute",
        "width": "100%",
        "height": "100%",
        "display": "table",
        "pointer-events": "none"
      });
      loaderCanvas = $("<div />");
      loaderCanvas.css({
        "display": "table-cell",
        "width": "100%",
        "height": "100%",
        "vertical-align": "middle"
      });
      loader.append(loaderCanvas);
      this.$el.append(loader);
      loaderCanvas.append(this.spinner.canvas);
      return this.spinner.play();
    };

    AppViewMusic.prototype.addInterface = function() {
      this.container = $('<div class="button_music_container"/>');
      this.buttons = $('<div class="button_music_play"/>');
      this.playPause = $('<div class="playPause"/>');
      this.playPause.css({
        "visibility": "hidden"
      });
      this.btPlay = $('<img src="/img/preview/music_button_play.png"/>');
      this.btPlay.bind('click', this.tooglePlay);
      this.btPause = $('<img src="/img/preview/music_button_pause.png"/>');
      this.btPause.bind('click', this.tooglePlay);
      this.btPause.css({
        opacity: 0
      });
      this.playPause.append(this.btPause);
      this.playPause.append(this.btPlay);
      this.buttons.append(this.playPause);
      this.container.append(this.buttons);
      this.$el.append(this.container);
      return this.addSpinner();
    };

    AppViewMusic.prototype.tooglePlay = function() {
      if (!this.playing) {
        this.playing = true;
        this.btPause.css({
          opacity: 1
        });
        this.btPlay.css({
          opacity: 0
        });
        return SoundController.preview(this.oz().result);
      } else {
        this.playing = false;
        this.btPause.css({
          opacity: 0
        });
        this.btPlay.css({
          opacity: 1
        });
        return SoundController.stopBackgroundMusic();
      }
    };

    AppViewMusic.prototype.soudControllerLoaded = function() {
      this.soundsLoaded = true;
      return SoundController.send("load_scene_5", "musicbox_shared");
    };

    AppViewMusic.prototype.onAllSoundsLoaded = function() {
      var _this = this;
      SoundController.batchLoaded = false;
      this.spinner.stop();
      $(this.spinner.canvas).animate({
        opacity: 0
      }, {
        duration: 250,
        complete: function() {
          return $(_this.spinner.canvas).css({
            visibility: "hidden"
          });
        }
      });
      return this.activate();
    };

    AppViewMusic.prototype.activate = function() {
      this.playPause.css({
        opacity: 0,
        visibility: "visible"
      });
      this.playPause.animate({
        opacity: 1
      }, 300);
      return this;
    };

    AppViewMusic.prototype.onEnterFrame = function() {
      if (!this.soundsLoaded) {
        if (SoundController.loaded) {
          this.soudControllerLoaded();
        }
      } else if (SoundController.batchLoaded) {
        this.onAllSoundsLoaded();
      }
      return AppViewMusic.__super__.onEnterFrame.call(this);
    };

    AppViewMusic.prototype.oz = function() {
      return (window || document).oz;
    };

    return AppViewMusic;

  })(Abstract);

  MusicBox = (function(_super) {

    __extends(MusicBox, _super);

    function MusicBox() {
      this.dispose = __bind(this.dispose, this);
      this.restore = __bind(this.restore, this);
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);      return MusicBox.__super__.constructor.apply(this, arguments);
    }

    MusicBox.prototype.data = null;

    MusicBox.prototype.initialize = function(data) {
      this.data = data;
      return MusicBox.__super__.initialize.call(this);
    };

    MusicBox.prototype.init = function() {
      this.container = new Abstract().setElement($('<div class="musicbox"/>'));
      this.container.dispose = function() {};
      this.addChild(this.container);
      return this.render();
    };

    MusicBox.prototype.render = function() {
      this.$el.css({
        "position": "absolute",
        "display": "table",
        "width": "100%",
        "height": "100%"
      });
      this.table = new MusicBoxTable(this.data);
      return this.container.addChild(this.table);
    };

    MusicBox.prototype.restore = function() {
      return this.container.$el.animate({
        opacity: 1
      }, 300, "linear");
    };

    MusicBox.prototype.dispose = function() {
      return MusicBox.__super__.dispose.call(this);
    };

    return MusicBox;

  })(Abstract);

  MusicBoxGrid = (function(_super) {

    __extends(MusicBoxGrid, _super);

    function MusicBoxGrid() {
      this.newTooltip = __bind(this.newTooltip, this);
      this.cellHoverOff = __bind(this.cellHoverOff, this);
      this.cellHoverOn = __bind(this.cellHoverOn, this);
      this.activateCell = __bind(this.activateCell, this);
      this.cellClick = __bind(this.cellClick, this);
      this.playing = __bind(this.playing, this);
      this.buildTable = __bind(this.buildTable, this);
      this.init = __bind(this.init, this);      return MusicBoxGrid.__super__.constructor.apply(this, arguments);
    }

    MusicBoxGrid.prototype.animating = false;

    MusicBoxGrid.prototype.template = "        <div class='music-grid-table'>             <table>            </table>        </div>        ";

    MusicBoxGrid.prototype.table = null;

    MusicBoxGrid.prototype.data = null;

    MusicBoxGrid.prototype.init = function() {
      return this.table = this.$el.find("table");
    };

    MusicBoxGrid.prototype.buildTable = function(data) {
      var col, content, i, j, row, _i, _j, _ref, _ref1;
      this.data = data;
      content = $("<tbody></tbody>");
      for (i = _i = 0, _ref = this.data.dimensions.lines; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        row = $("<tr></tr>");
        for (j = _j = 0, _ref1 = this.data.dimensions.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          col = $("<td data-note='" + i + "'></td>");
          row.append(col);
          if ($.inArray(i, this.data.cols[j].rows) > -1) {
            this.activateCell(col);
          }
        }
        content.append(row);
      }
      this.table.append(content);
      return this.render();
    };

    MusicBoxGrid.prototype.events = {
      "click td": "cellClick",
      "mouseenter td": "cellHoverOn",
      "mouseleave td": "cellHoverOff"
    };

    MusicBoxGrid.prototype.playing = function(bool) {
      if (bool === true) {
        return this.animating = true;
      } else if (bool === false) {
        return this.animating = false;
      }
    };

    MusicBoxGrid.prototype.cellClick = function(e) {
      return this.activateCell($(e.currentTarget));
    };

    MusicBoxGrid.prototype.activateCell = function(el) {
      return el.toggleClass("on");
    };

    MusicBoxGrid.prototype.cellHoverOn = function(e) {
      var toolTip;
      if (this.animating === false) {
        $(e.currentTarget).prepend(this.newTooltip(this.data.notes[(this.data.dimensions.lines - 1) - $(e.currentTarget).attr("data-note")].label));
        toolTip = $(e.currentTarget).find('.music-note-tooltip');
        toolTip.css({
          "margin-top": "" + (-44) + "px",
          "margin-left": "" + (($(e.currentTarget).width() / 2) - 20) + "px"
        });
        return toolTip.fadeIn(300);
      }
    };

    MusicBoxGrid.prototype.cellHoverOff = function(e) {
      var toolTip;
      if (this.animating === false) {
        toolTip = $(e.currentTarget).find('.music-note-tooltip');
        return toolTip.fadeOut(300).remove();
      }
    };

    MusicBoxGrid.prototype.newTooltip = function(string) {
      return '<div class="music-note-tooltip">' + string + '</div>';
    };

    return MusicBoxGrid;

  })(Abstract);

  MusicBoxTable = (function(_super) {

    __extends(MusicBoxTable, _super);

    function MusicBoxTable() {
      this.dispose = __bind(this.dispose, this);
      this.playLoopSound = __bind(this.playLoopSound, this);
      this.doLoopAudio = __bind(this.doLoopAudio, this);
      this.stop = __bind(this.stop, this);
      this.play = __bind(this.play, this);
      this.togglePlay = __bind(this.togglePlay, this);
      this.exportJson = __bind(this.exportJson, this);
      this.render = __bind(this.render, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return MusicBoxTable.__super__.constructor.apply(this, arguments);
    }

    MusicBoxTable.prototype.template = "        <div class='box-container'>            <div class='decorated-box'>                <div class='center_bar'></div>                                <div id='r1' class='row'>                    <div id='c11' class='cell'></div>                    <div id='c12' class='cell'></div>                    <div id='c13' class='cell'></div>                </div>                <div id='r2' class='row'>                    <div id='c21' class='cell'></div>                    <div id='c22' class='cell'>                        <div class='grid-mask'></div>                    </div>                    <div id='c23' class='cell'></div>                </div>                <div id='r3' class='row'>                    <div id='c31' class='cell'></div>                    <div id='c32' class='cell'></div>                    <div id='c33' class='cell'></div>                </div>            </div>            <div class='musicbox_button_container'>            </div>        </div>        ";

    MusicBoxTable.prototype.playing = false;

    MusicBoxTable.prototype.stopPlaying = false;

    MusicBoxTable.prototype.wasPlaying = false;

    MusicBoxTable.prototype.animationTimer = null;

    MusicBoxTable.prototype.animationDuration = 1000 / 3;

    MusicBoxTable.prototype.initialize = function(data) {
      this.data = data;
      return MusicBoxTable.__super__.initialize.call(this);
    };

    MusicBoxTable.prototype.init = function() {
      return this.render();
    };

    MusicBoxTable.prototype.render = function() {
      var buttonsContainer;
      this.grid = new MusicBoxGrid;
      this.grid.buildTable(this.data);
      this.container = this.$el.find(".grid-mask");
      this.container.append(this.grid.$el);
      this.playBtn = new SSAsset('button_play');
      this.pauseBtn = new SSAsset('button_pause');
      this.pauseBtn.$el.css({
        "position": "absolute",
        "top": 0,
        "width": "" + (parseInt(this.pauseBtn.$el.css("width")) + 1) + "px"
      });
      this.pauseBtn.hide();
      this.playPauseBtn = new Abstract().setElement($("<div class='autoplay'/>"));
      this.playPauseBtn.$el.on("click", this.togglePlay);
      this.playPauseBtn.addChild(this.playBtn);
      this.playPauseBtn.addChild(this.pauseBtn);
      buttonsContainer = this.$el.find('.musicbox_button_container');
      buttonsContainer.append(this.playPauseBtn.$el);
      this["export"] = new SimpleButton("exportJson", "Export JSON");
      this["export"].on("click", this.exportJson);
      return buttonsContainer.append(this["export"].$el);
    };

    MusicBoxTable.prototype.exportJson = function() {
      var a, blob, data;
      data = this.exportSong('col');
      data.dimensions = {
        "lines": this.data.dimensions.lines,
        "cols": this.data.dimensions.cols
      };
      data.notes = this.data.notes;
      data.loops = this.data.loops;
      a = document.createElement('a');
      blob = new Blob([JSON.stringify(data)], {
        "type": "text\/json"
      });
      a.href = window.URL.createObjectURL(blob);
      a.download = "music.json";
      return a.click();
    };

    MusicBoxTable.prototype.togglePlay = function() {
      if (this.playing) {
        return this.stop();
      } else {
        return this.play();
      }
    };

    MusicBoxTable.prototype.play = function() {
      this.playLoop($(this.$el.find('table')[0]));
      this.playAudioLoop(this.exportSong('col'));
      this.playing = true;
      this.grid.playing(true);
      this.playBtn.hide(true);
      return this.pauseBtn.show(true);
    };

    MusicBoxTable.prototype.stop = function() {
      this.stopLoop();
      this.stopAudioLoop();
      this.playing = false;
      this.grid.playing(false);
      this.playBtn.show(true);
      return this.pauseBtn.hide(true);
    };

    MusicBoxTable.prototype.playLoop = function(table) {
      var clone, i, tableWidth, tooltips,
        _this = this;
      tooltips = table.find('.music-note-tooltip');
      i = 0;
      while (i < tooltips.length) {
        $(tooltips[i]).remove();
        i++;
      }
      clone = table.clone(true, true);
      this.grid.$el.append(clone);
      clone.addClass("leftTweak");
      tableWidth = parseInt(table.css("width"), 10);
      return this.loopAnimation = table.animate({
        "margin-left": -tableWidth
      }, this.animationDuration * this.data.dimensions.cols, "linear", function() {
        table.remove();
        return _this.playLoop($(_this.$el.find('table')[0]));
      });
    };

    MusicBoxTable.prototype.stopLoop = function() {
      var table;
      this.loopAnimation.stop();
      if (this.$el.find('table').length > 1) {
        table = $(this.$el.find('table')[0]);
        table.remove();
      }
      return $(this.$el.find('table')).removeClass("leftTweak");
    };

    MusicBoxTable.prototype.playAudioLoop = function(songArr) {
      var colStepDuration;
      colStepDuration = this.animationDuration;
      this.colNo = this.data.dimensions.cols / 2;
      this.doLoopAudio(songArr);
      return this.loopAudio = setInterval(this.doLoopAudio, colStepDuration, songArr);
    };

    MusicBoxTable.prototype.doLoopAudio = function(songArr) {
      var currentCol, i, rowNo;
      if (this.colNo > this.data.dimensions.cols - 1) {
        this.colNo = 0;
      }
      console.log("------------------------------------------- ", this.colNo);
      currentCol = songArr.cols[this.colNo];
      i = 0;
      while (i < currentCol.rows.length) {
        rowNo = currentCol.rows[i];
        this.playSound(this.colNo, rowNo);
        this.animateCell(this.colNo, rowNo);
        i++;
      }
      i = 0;
      while (i < this.data.loops.length) {
        this.playLoopSound(this.data.loops[i]);
        i++;
      }
      return this.colNo++;
    };

    MusicBoxTable.prototype.playLoopSound = function(data) {
      var event;
      event = "";
      if (data.step) {
        if (this.colNo % data.step === 0) {
          event = data.event;
        }
      } else if (data.col != null) {
        if (this.colNo === data.col) {
          event = data.event;
        }
      }
      if (event !== "") {
        return SoundController.send(data.event);
      }
    };

    MusicBoxTable.prototype.stopAudioLoop = function() {
      return clearInterval(this.loopAudio);
    };

    MusicBoxTable.prototype.exportSong = function(orderBy) {
      var i, n, songExport, table;
      if (!orderBy) {
        orderBy = 'row';
      }
      table = $(this.$el.find('table'));
      if (orderBy === 'row') {
        songExport = {
          'rows': []
        };
        i = 0;
        while (i < this.data.dimensions.lines) {
          songExport.rows[i] = {
            'columns': []
          };
          n = 0;
          while (n < this.data.dimensions.cols) {
            if (this.checkCell(table, i, n) === true) {
              songExport.rows[i].columns.push(n);
            }
            n++;
          }
          i++;
        }
      } else if (orderBy === 'col') {
        songExport = {
          'cols': []
        };
        i = 0;
        while (i < this.data.dimensions.cols) {
          songExport.cols[i] = {
            'rows': []
          };
          n = 0;
          while (n < this.data.dimensions.lines) {
            if (this.checkCell(table, n, i) === true) {
              songExport.cols[i].rows.push(n);
            }
            n++;
          }
          i++;
        }
      }
      return songExport;
    };

    MusicBoxTable.prototype.checkCell = function(table, rowNum, colNum) {
      var cell, row;
      row = $(table.find('tr')[rowNum]);
      cell = $(row.find('td')[colNum]);
      if (cell) {
        if (cell.hasClass('on')) {
          return true;
        } else {
          return false;
        }
      } else {
        throw "Error exporting song: couldn't find specified cell.";
      }
    };

    MusicBoxTable.prototype.playSound = function(colNo, rowNo) {
      return SoundController.send(this.getSoundEvent(colNo, rowNo));
    };

    MusicBoxTable.prototype.animateCell = function(colNo, rowNo) {
      var cell, flashDuration, removeFlash, row, table;
      if (colNo < (this.data.dimensions.cols / 2) && this.$el.find('table').length > 1) {
        table = this.$el.find('table')[1];
      } else {
        table = this.$el.find('table')[0];
      }
      row = $(table).find('tr')[rowNo];
      cell = $(row).find('td')[colNo];
      $(cell).addClass('flash');
      removeFlash = function() {
        return $(cell).removeClass('flash');
      };
      flashDuration = this.animationDuration;
      return setTimeout(removeFlash, flashDuration);
    };

    MusicBoxTable.prototype.getSoundEvent = function(colNo, rowNo) {
      return this.data.notes[(this.data.dimensions.lines - 1) - rowNo].event;
    };

    MusicBoxTable.prototype.dispose = function() {
      this.loopAnimation.stop();
      this.playPauseBtn.$el.off("click", this.togglePlay);
      this.btAmbientSound.off("click", this.testAmbientSound);
      return this["export"].off("click", this.exportJson);
    };

    return MusicBoxTable;

  })(Abstract);

  Tune = (function() {

    Tune.prototype.sampleRate = 44100;

    Tune.prototype.frequency = 440;

    Tune.prototype.sample = 0;

    Tune.prototype.length = 12;

    Tune.prototype.samplesLeft = null;

    Tune.prototype.mix = 0.5;

    Tune.prototype.pan = 0.5;

    function Tune(sampleRate, frequency, pan, length) {
      this.getMix = __bind(this.getMix, this);
      this._generate = __bind(this._generate, this);
      this.generate = __bind(this.generate, this);      this.sampleRate = isNaN(sampleRate) || sampleRate === null ? this.sampleRate : sampleRate;
      this.frequency = isNaN(frequency) || frequency === null ? this.frequency : frequency;
      this.pan = isNaN(pan) || pan === null ? this.pan : pan;
      this.length = isNaN(length) || length === null ? this.length : length;
      this.samplesLeft = this.length * this.sampleRate;
      this.osc = audioLib.Oscillator(this.sampleRate, this.frequency * 2);
      this.lfo = audioLib.Oscillator(this.sampleRate, this.frequency * 2.8);
      this.envelope = audioLib.ADSREnvelope(this.sampleRate, 10, 100, 0.2, 2000, 10, this.length * 1000);
      this.lfo.waveShape = 'sine';
      this.envelope.triggerGate();
    }

    Tune.prototype.generate = function() {
      this.lfo.generate();
      this.osc.fm = this.lfo.getMix();
      this.osc.generate();
      this.envelope.generate();
      this.sample = this.osc.getMix() * this.envelope.getMix();
      if (!--this.samplesLeft) {
        return this.generate = this._generate;
      }
    };

    Tune.prototype._generate = function() {};

    Tune.prototype.getMix = function(ch) {
      return this.sample * this.pan;
    };

    return Tune;

  })();

  AppViewZoe = (function(_super) {

    __extends(AppViewZoe, _super);

    function AppViewZoe() {
      this.oz = __bind(this.oz, this);
      this.initialize = __bind(this.initialize, this);      return AppViewZoe.__super__.constructor.apply(this, arguments);
    }

    AppViewZoe.prototype.initialize = function() {
      this.setElement($('body'));
      this.header = new Header;
      this.$el.append(this.header.$el);
      this.thumb = new ThumbZoe;
      this.wrapper = $('<div class="wrapper"/>');
      this.$el.append(this.wrapper);
      this.containerThumb = this.wrapper.append('<div class="thumbContainer"><div class="thumbCell" style="margin-top: 25px;" /></div>');
      this.container = this.$el.append('<div class="buttonContainer"><div class="buttonCell" /></div>');
      this.button = new Button(this.oz().locale.get('zoetropeSharePageButton'), '/zoetrope');
      this.footer = new Footer;
      this.container.find('.buttonCell').append(this.button.$el);
      this.containerThumb.find('.thumbCell').append(this.thumb.$el);
      this.$el.append(this.footer.$el);
      return this.thumb.init(this.getImageId());
    };

    AppViewZoe.prototype.getImageId = function() {
      return window.location.href.substr(window.location.href.lastIndexOf('/') + 1, window.location.href.length);
    };

    AppViewZoe.prototype.oz = function() {
      return (window || document).oz;
    };

    return AppViewZoe;

  })(Backbone.View);

  ThumbZoe = (function(_super) {

    __extends(ThumbZoe, _super);

    function ThumbZoe() {
      this.loadComplete = __bind(this.loadComplete, this);
      this.getWidth = __bind(this.getWidth, this);
      this.getHeight = __bind(this.getHeight, this);
      this.animate = __bind(this.animate, this);
      this.init = __bind(this.init, this);
      this.initialize = __bind(this.initialize, this);      return ThumbZoe.__super__.constructor.apply(this, arguments);
    }

    ThumbZoe.prototype.tagName = 'div';

    ThumbZoe.prototype.currentFrame = 0;

    ThumbZoe.prototype.totalFrames = 0;

    ThumbZoe.prototype.ratio = 1.777777778;

    ThumbZoe.prototype.imgRatio = 0;

    ThumbZoe.prototype.__w = 0;

    ThumbZoe.prototype.initialize = function() {
      return this;
    };

    ThumbZoe.prototype.init = function(id) {
      var _this = this;
      this.bg = new Image;
      this.bg.onload = function(img) {
        _this.__w = document.width;
        _this.imgRatio = _this.bg.width / _this.bg.height;
        if (_this.__w > 600) {
          _this.__w = 600;
        }
        /*@bg.height = Math.round( @__w / @ratio )
        @bg.width = Math.round( @bg.height * @imgRatio )
        */

        _this.$el.append(_this.bg);
        _this.$spriteSheet = _this.$el.find('img:first-child');
        _this.$el.css({
          'height': _this.bg.height,
          'width': _this.__w,
          'margin-left': '18px'
        });
        _this.totalFrames = Math.round(_this.bg.width / _this.__w);
        setInterval(_this.animate, 150);
        return _this.loadComplete();
      };
      if (window.location.href.indexOf(':8888') > -1 || window.location.href.indexOf('unit9') > -1) {
        return this.bg.src = "/api/image/get/example.jpeg";
      } else {
        return this.bg.src = "/api/image/get/" + id;
      }
    };

    ThumbZoe.prototype.animate = function() {
      this.currentFrame++;
      if (this.currentFrame >= this.totalFrames) {
        this.currentFrame = 0;
      }
      return this.$spriteSheet.css({
        'margin-left': (-this.currentFrame * this.__w) + 'px'
      });
    };

    ThumbZoe.prototype.getHeight = function() {
      return this.bg.height;
    };

    ThumbZoe.prototype.getWidth = function() {
      return this.__w;
    };

    ThumbZoe.prototype.loadComplete = function() {};

    return ThumbZoe;

  })(Backbone.View);

  $(function() {
    var getIdRequest, getModule, initEnterFrame, onError, onLoadAssets, onLoadImage1x, onSuccess, render, requestImage, view,
      _this = this;
    view = window || document;
    view.oz = {};
    view.oz.ss = null;
    view.oz.view = null;
    view.oz.imagesSS = null;
    view.oz.result = null;
    view.oz.ssImage = new Image();
    view.oz.ssImage.onload = function() {
      return onLoadImage1x();
    };
    view.oz.ssImage2x = new Image();
    view.oz.ssImage2x.onload = function() {
      view.oz.ss.image2FullSize = [view.oz.ssImage2x.width, view.oz.ssImage2x.height];
      return onLoadAssets();
    };
    onSuccess = function(event) {
      view.oz.imagesSS = view.oz.ss.getImage();
      return view.oz.ssImage.src = view.oz.imagesSS.image;
    };
    getModule = function() {
      var del, i, lastI, module, url;
      url = window.location.href;
      del = "preview/";
      i = url.indexOf(del);
      lastI = url.lastIndexOf('/');
      module = url.substring(i + del.length, lastI).split('/').join('');
      return module;
    };
    getIdRequest = function() {
      return window.location.href.substr(window.location.href.lastIndexOf('/') + 1, window.location.href.length);
    };
    onLoadImage1x = function() {
      view.oz.ss.image1FullSize = [view.oz.ssImage.width, view.oz.ssImage.height];
      if (view.oz.imagesSS.image2) {
        return view.oz.ssImage2x.src = view.oz.imagesSS.image2;
      } else {
        return onLoadAssets();
      }
    };
    onLoadAssets = function() {
      view.oz.ss.image1FullSize = [view.oz.ssImage.width, view.oz.ssImage.height];
      view.oz.locale = new Locale;
      view.oz.locale.on('complete', requestImage);
      return view.oz.locale.init();
    };
    render = function(event) {
      view.oz.result = event.result ? event.result : event;
      switch (view.oz.module) {
        case 'cutout':
          if (event.result.approved) {
            return view.oz.view = new AppViewCutout;
          } else {
            return view.oz.view = new ErrorMessage;
          }
          break;
        case 'music':
          view.oz.view = new AppViewMusic;
          return initEnterFrame();
        case 'zoe':
          if (event.result.approved) {
            return view.oz.view = new AppViewZoe;
          } else {
            return view.oz.view = new ErrorMessage;
          }
      }
    };
    requestImage = function() {
      switch (view.oz.module) {
        case 'music':
          return $.ajax({
            url: "/api/music/" + (getIdRequest()),
            error: function() {
              return view.oz.view = new ErrorMessage;
            },
            success: render
          });
        default:
          return $.ajax({
            url: "/api/image/info/" + (getIdRequest()),
            error: function() {
              return view.oz.view = new ErrorMessage;
            },
            success: render
          });
      }
    };
    onError = function(event) {
      return console.log(event);
    };
    initEnterFrame = function() {
      var _base;
      window.requestAnimationFrame(initEnterFrame);
      return typeof (_base = view.oz.view).onEnterFrame === "function" ? _base.onEnterFrame() : void 0;
    };
    view.oz.module = getModule();
    view.oz.ss = new CollectionAssets;
    view.oz.ss.url = "/js/ss/extra_pages.json";
    return view.oz.ss.fetch({
      success: onSuccess,
      error: onError
    });
  });

}).call(this);
